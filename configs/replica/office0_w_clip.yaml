# Sequence parameters
sequence_type: "custom_w_slam.CustomReplicawSLAM"
sequence_kwargs:
  path: "data/Replica/office0/results/"
  start_frame: 0
  end_frame: -1                                       # Run all frames
  first_tq: [0, 0, 0.0, 0.0, -1.0, 0.0, 0.0] 
  load_gt: True

  mesh_gt: "data/Replica/office0_mesh.ply"

outdir: "./output/w_clip/replica/office0/"

slam: False

# Network parameters (network structure, etc. will be inherited from the training config)
training_hypers: "ckpt/default/hyper.json"
using_epoch: 300


# Separate tracking and meshing.
run_async: True
# Enable visualization
vis: False
resolution: 4

# These two define the range of depth observations to be cropped. Unit is meter.
depth_cut_min: 0.1
depth_cut_max: 10.0

meshing_interval: 10
integrate_interval: 10
track_interval: 10
#color_integrate_interval: 20


# Mapping parameters
surface_mapping:
  GPIS_mode: "sample"
  margin: .1
 
  # Bound of the scene to be reconstructed
  bound_min: [-10., -5., -10.]
  bound_max: [10., 5., 10.]
 
  voxel_size: 0.05
  # Prune observations if detected as noise.
  prune_min_vox_obs: 1
  ignore_count_th: 1.0
  encoder_count_th: 60000.0

# Mapping parameters
context_mapping:
  # Bound of the scene to be reconstructed
  bound_min: [-10., -5., -10.]
  bound_max: [10., 5., 10.]
  voxel_size: .02
  # Prune observations if detected as noise.
  prune_min_vox_obs: 1
  ignore_count_th: 1.0
  encoder_count_th: 60000.0

# Mapping parameters
latent_mapping:
  # Bound of the scene to be reconstructed
  bound_min: [-10., -5., -10.]
  bound_max: [10., 5., 10.]
  voxel_size: .1
  # Prune observations if detected as noise.
  prune_min_vox_obs: 1
  ignore_count_th: 1.0
  encoder_count_th: 60000000.0





# Tracking parameters
tracking:
  # An array defining how the camera pose is optimized.
  # Each element is a dictionary:
  #   For example {"n": 2, "type": [['sdf'], ['rgb', 1]]} means to optimize the summation of sdf term and rgb term
  # at the 1st level pyramid for 2 iterations.
  iter_config:
          #- {"n": 10, "type": [['rgb', 2]]}
      - {"n": 5, "type": [['sdf'], ['rgb', 1]]}
      - {"n": 10, "type": [['sdf'], ['rgb', 0]]}
  sdf:
    robust_kernel: "huber"
    robust_k: 5.0
    subsample: 0.5
  rgb:
    weight: 500.0
    robust_kernel: null
    robust_k: 0.01
    min_grad_scale: 0.0
    max_depth_delta: 0.2
